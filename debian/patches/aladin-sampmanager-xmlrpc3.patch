Description: Follow Apache XMLRPC2->XMLRPC3 API changes
 The 'SAMPManager' components of Aladin were written against the
 Apache XMLRPC v2 API; but only the v3 libraries are available in Debian.
Author: Paul Sladen <debian@paul.sladen.org>, Ole Streicher <olebole@debian.org>
Last-Update: 2016-11-07
--- a/cds/aladin/SAMPManager.java
+++ b/cds/aladin/SAMPManager.java
@@ -62,10 +62,14 @@
 import javax.swing.ListSelectionModel;
 import javax.swing.SwingUtilities;
 
-import org.apache.xmlrpc.WebServer;
-import org.apache.xmlrpc.XmlRpcClient;
+import org.apache.xmlrpc.server.XmlRpcHandlerMapping;
+import org.apache.xmlrpc.webserver.WebServer;
+import org.apache.xmlrpc.client.XmlRpcClient;
+import org.apache.xmlrpc.client.XmlRpcClientConfigImpl;
+import org.apache.xmlrpc.server.XmlRpcServer;
 import org.apache.xmlrpc.XmlRpcException;
 import org.apache.xmlrpc.XmlRpcHandler;
+import org.apache.xmlrpc.XmlRpcRequest;
 import org.astrogrid.samp.hub.Hub;
 import org.astrogrid.samp.hub.HubServiceMode;
 
@@ -125,7 +129,7 @@
  * @see <a href="http://www.ivoa.net/cgi-bin/twiki/bin/view/IVOA/SampProgress">SAMP page on the IVOA web site</a>
  *
  */
-public class SAMPManager implements AppMessagingInterface, XmlRpcHandler, PlaneLoadListener {
+public class SAMPManager implements AppMessagingInterface, PlaneLoadListener {
 
     static final protected String NOTIFY = "samp.hub.notify";
     static final protected String NOTIFY_ALL = "samp.hub.notifyAll";
@@ -347,11 +351,30 @@
         // start XML-RPC server
         int xmlRpcPort = findFreePort();
         aladinXmlRpcServer = new WebServer(xmlRpcPort);
-        aladinXmlRpcServer.start();
+        try {
+	    aladinXmlRpcServer.start();
+        } catch(IOException e) {
+            e.printStackTrace();
+        }
         String callbackAddress = "http://"+getLocalhost()+":"+xmlRpcPort+"/";
 
         trace(" Aladin callback address is: "+callbackAddress);
-        aladinXmlRpcServer.addHandler("samp.client", this);
+
+	XmlRpcHandlerMapping rpcHandlerMapping = new XmlRpcHandlerMapping() {
+		public XmlRpcHandler getHandler(String handlerName) {
+		    return new XmlRpcHandler() {
+			public Object execute(XmlRpcRequest pRequest)
+			    throws XmlRpcException {
+			    Vector params = new Vector();
+			    for (int i = 0; i < pRequest.getParameterCount(); i++) {
+				params.add(pRequest.getParameter(i));
+			    }
+			    return SAMPManager.this.execute(pRequest.getMethodName(), params);
+			}
+		    };
+		}
+	    };
+        aladinXmlRpcServer.getXmlRpcServer().setHandlerMapping(rpcHandlerMapping);
 
         // set XML-RPC callback
         params = new Vector();
@@ -988,12 +1011,15 @@
         try  {
             // testing if the hub is alive (by pinging it)
             URL url = new URL(hubUrl);
-            hubClient = new XmlRpcClient(url);
+            hubClient = new XmlRpcClient();
+            XmlRpcClientConfigImpl clientConfig = new XmlRpcClientConfigImpl();
+            clientConfig.setServerURL(url);
+            hubClient.setConfig(clientConfig);
 
             try {
                 hubClient.execute(HUB_MSG_PING, new Vector());
             }
-            catch(ConnectException xre) {
+            catch(XmlRpcException xre) {
                 Aladin.trace(3, "Unable to connect to the hub, deleting the .samp file");
                 // on efface le fichier ".samp" qui, apparemment, pointe vers un hub ne tournant plus
                 try {
@@ -1015,24 +1041,9 @@
 
 
         }
-        catch(java.rmi.ConnectException ce) {
-            Aladin.trace(3, "Unable to connect to the hub, deleting the .samp file");
-            // on efface le fichier ".plastic" qui, apparemment, pointe vers un hub ne tournant plus
-            try {
-                if( confFile.delete() ) {
-                    updateState();
-                    return getHubListener(silent, launchHubIfNeeded);
-                }
-                else {
-                    if( !silent ) Aladin.warning(CANT_CONNECT);
-                    return false;
-                }
-            }
-            catch(Exception e) {return false;}
-        }
         catch(Exception e) {
             e.printStackTrace();
-            trace("Unable to create the PlasticHubListener object");
+            trace("Unable to create the SAMPHubListener object");
 
             if( !silent ) Aladin.warning(CANT_CONNECT);
             return false;
